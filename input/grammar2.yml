imports:
  - import random
  - import numpy as np

syntax:
  - rule: L -> E
    weight:
      E: "lambda parent_dif: general_difficult"

  - rule: E -> M1 * M2
    weight:
      M1: "lambda parent_dif: parent_dif / 2"
      M2: "lambda parent_dif: parent_dif / 2"
    actions:
      - E_(index).leftrow := rand(1, 6)  # 生成整数
      - E_(index).leftcolumn := rand(1, 6)
      - E_(index).rightrow := E_(index).leftcolumn  # 直接使用整数值
      - E_(index).rightcolumn := rand(1, 6)

  - rule: E -> M1 + M2
    weight:
      M1: "lambda parent_dif: parent_dif / 2"
      M2: "lambda parent_dif: parent_dif / 2"
    actions:
      - E_(index).leftrow := rand(1, 6)
      - E_(index).leftcolumn := rand(1, 6)
      - E_(index).rightrow := E_(index).leftrow
      - E_(index).rightcolumn := E_(index).leftcolumn

  - rule: M1 -> ( E )
    weight:
      E: "lambda parent_dif: 0.75 * parent_dif"  # 修改权重计算
    condition: "(15, ~]"
    actions:
      - M1_(index).target := generate_matrix(E_(index).leftrow, E_(index).leftcolumn)

  - rule: M2 -> ( E )
    weight:
      E: "lambda parent_dif: 0.75 * parent_dif"  # 修改权重计算
    condition: "(15, ~]"
    actions:
      - M2_(index).target := generate_matrix(E_(index).rightrow, E_(index).rightcolumn)

  - rule: M1 -> Matrix
    weight:
      Matrix: "lambda parent_dif: parent_dif"
    condition: "[0, 15]"
    actions:
      - Matrix_(index).target := generate_matrix(E_(index).leftrow, E_(index).leftcolumn)

  - rule: M2 -> Matrix
    weight:
      Matrix: "lambda parent_dif: parent_dif"
    condition: "[0, 15]"
    actions:
      - Matrix_(index).target := generate_matrix(E_(index).rightrow, E_(index).rightcolumn)

constants:
  - general_difficult: 30  # 初始难度值
  - threshold: 0.0        # 权重阈值

functions:
  rand:
    implementation: |
      def rand(min_val, max_val):
          """生成指定范围内的随机整数"""
          return random.randint(min_val, max_val)

  generate_matrix:
    implementation: |
      def generate_matrix(row, col):
          return np.mat(np.random.randint(0, 10, size=(row, col)))