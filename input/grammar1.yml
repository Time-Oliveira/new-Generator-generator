imports:
  - import numpy, random, names
  - from itertools import *
  - import statistics
  - import pandas as pd
  - import re
  - import string
  - from math import *

syntax:
  - rule: L -> E
    weight:
      E: "lambda parent_dif: generator_difficult"

  - rule: E -> S F
    weight:
      S: "lambda parent_dif: parent_dif / 2 if parent_dif > 8 else 2"
      F: "lambda parent_dif, S: parent_dif - S if parent_dif - S > 4 else 0"

  - rule: S -> Select A
    weight:
      A: "lambda parent_dif: parent_dif"

  - rule: A -> Attribute
    weight:
      Attribute: "lambda parent_dif: parent_dif"
    actions:
      - Attribute_(index).target := select_attr_from_tab(
          Attribute_(index-1).target if get_symbol_index('Attribute') != 0 else None,
          T_(index-1).target if T_(index-1).target else None,
          T_(index-1).space if isinstance(T_(index-1).space, pd.DataFrame) else None,
          weight['Attribute_(0)'] if get_symbol_index('Attribute') == 0 else None
        )

  - rule: F -> From T
    weight:
      T: "lambda parent_dif: parent_dif"
    actions:
      - T_(index).target := select_table(
          Attribute_(index).target, 
          A_(index-1).target if get_symbol_index('A') != 0 else None,
          T_(index-1).target if get_symbol_index('T') != 0 else None
        )
      - T_(index).space := generate_table(
          Attribute_(index).target, 
          T_(index).target,
          T_(index-1).space if get_symbol_index('T') != 0 else None,
          weight['T_(0)'] if get_symbol_index('T') == 0 else None
          )

  - rule: T -> Table
    weight:
      Table: "lambda parent_dif: parent_dif"
    actions:
      - Table_(index).target := T_(index).target

  - rule: T -> ( E ) As TableName
    weight:
      E: "lambda parent_dif: parent_dif * 0.8"
      TableName: "lambda parent_dif: parent_dif"
    actions:
      - TableName_(index).target := get_table_alias()

columns:
  - name: GPA
    type: CustomFloat
    params: [2, 0, 4]
    dif: 2

  - name: Major
    type: RandomSelector
    params: ['CST', 'DS', 'AI', 'STAT', 'APSY', 'ACCT', 'PRA', 'AM', 'LSE', 'EPIN', 'FIN', 'MKT', 'AE', 'BA', 'FM', 'GAD', 'BA']
    dif: 2
    
  - name: Location
    type: CustomID
    params: ["T{1-6}|T29"]
    dif: 2

  - name: ID
    type: CustomID
    params: ["l1N9"]
    dif: 2

  - name: Age
    type: CustomInt
    params: [16, 30]
    dif: 2

  - name: Name
    type: RandomName
    params: [10, 15]
    dif: 2

  - name: Unit
    type: RandomSelector
    params: [1.0, 2.0, 3.0, 4.0]
    dif: 2

  - name: Classroom
    type: CustomID
    params: ["T{1-6}-{1-6}{1-2}{1-9}|T29-{1-6}{1-2}{1-9}"]
    dif: 2

# 定义表格部分
tables:
  - name: Course
    columns: [ID, Name, Unit, Classroom]
    dif: 8

  - name: Student
    columns: [ID, GPA, Age]
    dif: 7

  - name: School
    columns: [Major, Location]
    dif: 5

constants:
  - generator_difficult: 30  # 初始难度值
  - threshold: 0.0     # 难度阈值

functions:
  select_attr_from_tab:
    implementation: |
        # A_(index-1).target, T_(index-1).target, T_(index-1).space, weight['Attribute_(0)']
        def select_attr_from_tab(last_attr, last_table, parent_space, weight_value):
            # print(f"Processing select_attr_from_tab with parent_space:\n{parent_space}")
            
            if not isinstance(parent_space, pd.DataFrame):
                # 外层查询（第一层），从实体表中选择列
                all_tables = []
                for symbol in symbol_table.symbols.values():
                    if symbol['type'] in ['table']:
                        all_tables.append({
                            'name': symbol['name'],
                            'columns': [col.strip() for col in symbol['value'].split(',')]
                        })
                
                selected_table = random.choice(all_tables)
                difficulties = [(col, symbol_table.get_symbol(col)['dif']) 
                              for col in selected_table['columns']]

                return ", ".join([col for col, _ in random.choice([
                    combo for r in range(1, len(difficulties) + 1) 
                    for combo in combinations(difficulties, r) 
                    if sum(dif for _, dif in combo) <= weight_value
                ])])
            else:
                # 内层查询，需要确保生成的结果包含外层查询所需的列
                needed_columns = list(parent_space.columns)
                
                # 从实体表中选择包含所需列的表
                all_tables = []
                for symbol in symbol_table.symbols.values():
                    if symbol['type'] == 'table':
                        table_columns = [col.strip() for col in symbol['value'].split(',')]
                        if all(col in table_columns for col in needed_columns):
                            all_tables.append({
                                'name': symbol['name'],
                                'columns': table_columns
                            })
                
                if all_tables:
                    selected_table = random.choice(all_tables)
                    # 必须包含外层查询需要的列
                    return ", ".join(needed_columns)
            return None

            
  select_table:
    implementation: |
      # Attribute_index.target, A_(index-1).target, T_(index-1).target 
      def select_table(current_attr, last_attr, parent_table):
          print(f"Processing select_table with current_attr: {current_attr}")
          
          current_attrs = [attr.strip() for attr in current_attr.split(',')]
          
          # 选择能提供所需列的表
          for symbol in symbol_table.symbols.values():
              if symbol['type'] == 'table':
                  table_columns = [col.strip() for col in symbol['value'].split(',')]
                  if all(col in table_columns for col in current_attrs):
                      return symbol['name']
          return None
           
  generate_table:
    implementation: |
        # Attribute_index.target, T_index.target, T_(index-1).space, weight['T_(0)'] 
        def generate_table(Attribute_target, Table_target, parent_space, Table_dif):
            print(f"Processing generate_table for {Table_target}")
            print(f"Attributes to select: {Attribute_target}")
            
            # 获取当前表的所有可能列
            table_columns = []
            for symbol in symbol_table.symbols.values():
                if symbol['type'] == 'table' and symbol['name'] == Table_target:
                    table_columns = [col.strip() for col in symbol['value'].split(',')]
                    break
            
            attributes = [attr.strip() for attr in Attribute_target.split(',')]
            
            if isinstance(parent_space, pd.DataFrame):
                # 内层查询：生成比父空间更丰富的数据（行和列）
                df = pd.DataFrame()
                num_rows = len(parent_space)
                
                # 确保生成的数据行数大于父空间
                num_extra_rows = random.randint(5, 10)
                total_rows = num_rows + num_extra_rows
                
                # 决定是否生成额外的列（从表的所有可能列中选择）
                available_extra_columns = set(table_columns) - set(attributes)
                if available_extra_columns:
                    num_extra_cols = random.randint(1, min(3, len(available_extra_columns)))
                    extra_columns = random.sample(list(available_extra_columns), num_extra_cols)
                    all_columns = attributes + extra_columns
                else:
                    all_columns = attributes
                    
                print(f"Generating columns: {all_columns}")
                
                # 生成所有列的数据
                for attr in all_columns:
                    rows = []
                    attr_symbol = symbol_table.get_symbol(attr)
                    if not attr_symbol:
                        continue
                        
                    attr_value = attr_symbol['value']
                    match = re.match(r"(\w+)\((.*)\)", attr_value)
                    if match:
                        class_name = match.group(1)
                        params_str = match.group(2).strip()
                        
                        if params_str.startswith('[') and params_str.endswith(']'):
                            params = [item.strip().strip("'") for item in params_str[1:-1].split(",")]
                        else:
                            params = [eval(param.strip()) for param in params_str.split(",")]
                        
                        generator_class = globals().get(class_name)
                        if generator_class:
                            try:
                                # 生成所有行的数据
                                for _ in range(total_rows):
                                    custom_obj = generator_class(*params)
                                    rows.append(custom_obj.generate())
                            except Exception as e:
                                continue
                                
                    df[attr] = rows
                
                # 对于父空间中存在的列，确保部分行与父空间匹配
                parent_columns = set(parent_space.columns)
                for col in parent_columns.intersection(set(attributes)):
                    # 随机选择一些位置，使用父空间的值
                    match_positions = random.sample(range(total_rows), num_rows)
                    for i, pos in enumerate(match_positions):
                        df.loc[pos, col] = parent_space.iloc[i][col]
                
                # 随机打乱行的顺序
                df = df.sample(frac=1).reset_index(drop=True)
                
                print(f"\nGenerated table for {Table_target} (extended from parent space):")
                print(df)
                return df
            
            else:
                # 外层查询：也可能生成额外的列
                df = pd.DataFrame()
                num_rows = int(Table_dif)
                
                # 决定是否生成额外的列
                available_extra_columns = set(table_columns) - set(attributes)
                if available_extra_columns:
                    num_extra_cols = random.randint(1, min(3, len(available_extra_columns)))
                    extra_columns = random.sample(list(available_extra_columns), num_extra_cols)
                    all_columns = attributes + extra_columns
                else:
                    all_columns = attributes
                    
                print(f"Generating columns: {all_columns}")
                
                # 生成所有列的数据
                for attr in all_columns:
                    rows = []
                    attr_symbol = symbol_table.get_symbol(attr)
                    if not attr_symbol:
                        continue
                        
                    attr_value = attr_symbol['value']
                    match = re.match(r"(\w+)\((.*)\)", attr_value)
                    if match:
                        class_name = match.group(1)
                        params_str = match.group(2).strip()
                        
                        if params_str.startswith('[') and params_str.endswith(']'):
                            params = [item.strip().strip("'") for item in params_str[1:-1].split(",")]
                        else:
                            params = [eval(param.strip()) for param in params_str.split(",")]
                        
                        generator_class = globals().get(class_name)
                        if generator_class:
                            try:
                                for _ in range(num_rows):
                                    custom_obj = generator_class(*params)
                                    rows.append(custom_obj.generate())
                            except Exception as e:
                                continue
                                
                    df[attr] = rows
                
                print(f"\nGenerated table for {Table_target} (new data):")
                print(df)
                return df
                
            return None


  get_table_alias:
    implementation: |
      def get_table_alias():
          # 使用全局变量存储计数器
          if 'table_alias_counter' not in globals():
              globals()['table_alias_counter'] = 0
          globals()['table_alias_counter'] += 1
          return f"T{globals()['table_alias_counter']}"